From 0f77da116e5b66a6a32aadcca674b987b672c07c Mon Sep 17 00:00:00 2001
From: randalhsu <xxx@gmail.com>
Date: Thu, 4 Feb 2021 01:21:24 +0800
Subject: [PATCH 1/4] Synchronizable crosshairs

  Patch source:
  https://github.com/tradingview/lightweight-charts/issues/438#issuecomment-716291719
---
 src/api/chart-api.ts     |  8 ++++++++
 src/api/ichart-api.ts    |  4 ++++
 src/gui/pane-widget.ts   | 31 +++++++++++++++++++++++++++++++
 src/model/chart-model.ts | 24 ++++++++++++++++++++++++
 4 files changed, 67 insertions(+)

diff --git a/src/api/chart-api.ts b/src/api/chart-api.ts
index 12e31721..cb92b041 100644
--- a/src/api/chart-api.ts
+++ b/src/api/chart-api.ts
@@ -190,6 +190,14 @@ export class ChartApi implements IChartApi, DataUpdatesConsumer<SeriesType> {
 		this._timeScaleApi = new TimeScaleApi(model, this._chartWidget.timeAxisWidget());
 	}
 
+	public setCrossHairXY(x: number, y: number, visible: boolean): void {
+		this._chartWidget.paneWidgets()[0].setCrossHair(x, y, visible);
+	}
+
+	public clearCrossHair(): void {
+		this._chartWidget.paneWidgets()[0].clearCrossHair();
+	}
+
 	public remove(): void {
 		this._chartWidget.clicked().unsubscribeAll(this);
 		this._chartWidget.crosshairMoved().unsubscribeAll(this);
diff --git a/src/api/ichart-api.ts b/src/api/ichart-api.ts
index 1a62561b..2bc54de8 100644
--- a/src/api/ichart-api.ts
+++ b/src/api/ichart-api.ts
@@ -207,6 +207,10 @@ export interface IChartApi {
 	 */
 	subscribeCrosshairMove(handler: MouseEventHandler): void;
 
+	setCrossHairXY(x: number, y: number, visible: boolean): void;
+
+	clearCrossHair(): void;
+
 	/**
 	 * Unsubscribe a handler that was previously subscribed using {@link subscribeCrosshairMove}.
 	 *
diff --git a/src/gui/pane-widget.ts b/src/gui/pane-widget.ts
index 5e61661d..b32607cb 100644
--- a/src/gui/pane-widget.ts
+++ b/src/gui/pane-widget.ts
@@ -496,6 +496,33 @@ export class PaneWidget implements IDestroyable, MouseEventHandlers {
 		return this._rightPriceAxisWidget;
 	}
 
+	public getCrosshairPosition(x: Coordinate, y: Coordinate): void {
+		this._model().setAndSaveCurrentPosition(this._correctXCoord(x), this._correctYCoord(y), ensureNotNull(this._state));
+	}
+
+	public setCrossHair(xx: number, yy: number, visible: boolean): void {
+		if (!this._state) {
+			return;
+		}
+		if (visible) {
+			const x = xx as Coordinate;
+			const y = yy as Coordinate;
+
+			if (!mobileTouch) {
+				this._setCrosshairPositionNoFire(x, y);
+			}
+		} else {
+			this._state.model().setHoveredSource(null);
+			if (!isMobile) {
+				this._clearCrosshairPosition();
+			}
+		}
+	}
+
+	public clearCrossHair(): void {
+		this._clearCrosshairPosition();
+	}
+
 	private _onStateDestroyed(): void {
 		if (this._state !== null) {
 			this._state.onDestroyed().unsubscribeAll(this);
@@ -645,6 +672,10 @@ export class PaneWidget implements IDestroyable, MouseEventHandlers {
 		this._model().clearCurrentPosition();
 	}
 
+	private _setCrosshairPositionNoFire(x: Coordinate, y: Coordinate): void {
+		this._model().setAndSaveCurrentPositionFire(this._correctXCoord(x), this._correctYCoord(y), false, ensureNotNull(this._state));
+	}
+
 	private _tryExitTrackingMode(): void {
 		if (this._exitTrackingModeOnNextTry) {
 			this._startTrackPoint = null;
diff --git a/src/model/chart-model.ts b/src/model/chart-model.ts
index 9eaa559d..4a733d97 100644
--- a/src/model/chart-model.ts
+++ b/src/model/chart-model.ts
@@ -675,6 +675,30 @@ export class ChartModel implements IDestroyable {
 		this._crosshair.updateAllViews();
 	}
 
+	public setAndSaveCurrentPositionFire(x: Coordinate, y: Coordinate, fire: boolean, pane: Pane): void {
+		this._crosshair.saveOriginCoord(x, y);
+		let price = NaN;
+		let index = this._timeScale.coordinateToIndex(x);
+
+		const visibleBars = this._timeScale.visibleStrictRange();
+		if (visibleBars !== null) {
+			index = Math.min(Math.max(visibleBars.left(), index), visibleBars.right()) as TimePointIndex;
+		}
+
+		const priceScale = pane.defaultPriceScale();
+		const firstValue = priceScale.firstValue();
+		if (firstValue !== null) {
+			price = priceScale.coordinateToPrice(y, firstValue);
+		}
+		price = this._magnet.align(price, index, pane);
+
+		this._crosshair.setPosition(index, price, pane);
+		this.cursorUpdate();
+		if (fire) {
+			this._crosshairMoved.fire(this._crosshair.appliedIndex(), { x, y });
+		}
+	}
+
 	public updateTimeScale(newBaseIndex: TimePointIndex | null, newPoints?: readonly TimeScalePoint[], firstChangedPointIndex?: number): void {
 		const oldFirstTime = this._timeScale.indexToTime(0 as TimePointIndex);
 
-- 
2.32.0 (Apple Git-132)

